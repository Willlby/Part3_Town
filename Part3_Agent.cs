using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using System;
using UnityEngine.UI;
public class Part3_Agent : MonoBehaviour
{

    [SerializeField]
    List<GameObject> GoalsList = new List<GameObject>();
    List<GameObject> GameObjectsWithWaypointTag;
    List<Connection> List_Of_Connections = new List<Connection>();


    [SerializeField]
    int passengers = 0;

    Vector3 old_position;

    [SerializeField]
    public GameObject PersonPrefab;

    List<GameObject> myPassengers = new List<GameObject>();


    // Initialising text handlers (UI).
    Text t_Passengers;
    Text t_Runtime;
    Text t_fps;
    Text t_Speed;

    public GameObject go_Passengers;
    public GameObject go_Speed;


    float fps; // Used to store Frames Per Second (FPS).
    float totalDistanceTravelled = 0;
    public int NumberToSpawn;
    List<GameObject> CollectedPassengers = new List<GameObject>();

    // The game object which stores the taxi. This is the GameObject we attach our Agent script to.
    GameObject myTaxi;

    Vector3 OffSet = new Vector3(0, 0.5f, 0);

    Boolean arrived = false;
    Boolean returning = false;
    Boolean playTimer = true; //
    Boolean isPlaying = true; // Used to control the Update method.

    public int connectionsTravelled = 0;

    // Speed variables
    private float TRUE_MAX_SPEED = 20;
    private float MAX_SPEED = 20;
    [SerializeField]
    private float currentSpeed;
    private bool slowedDown = false;
    private const float CLOSE_DISTANCE = 1;



    private AStarManager AStarManager = new AStarManager();
    // The ACO Controller.
    ACOCON MyACOCON = new ACOCON();
    // Array of possible waypoints.
    
    // Connections between nodes.
    private List<ACOConnection> Connections = new List<ACOConnection>();
    // The route generated by the ACO algorith.
    private List<ACOConnection> MyRoute = new List<ACOConnection>();
    // Debug line offset.
    
    // The Start node for any created route.
    [SerializeField] private GameObject StartNode;
    // The max length of a path created by the ACO.
    [SerializeField] private int MaxPathLength;
    // Start is called before the first frame update


    void InitialiseText()
    {
        t_Passengers = go_Passengers.GetComponent<Text>();
        t_Speed = go_Speed.GetComponent<Text>();
        t_Runtime = GameObject.Find("Canvas/Runtime").GetComponent<Text>();
        t_fps = GameObject.Find("Canvas/FPS").GetComponent<Text>();

    }



    void CollectPassenger(GameObject p)
    {
            arrived = true;
            Debug.Log(p.name + " has been collected.");
            Destroy(p);           
            passengers += 1;
            MAX_SPEED = TRUE_MAX_SPEED - (TRUE_MAX_SPEED / 10 * passengers);
    }

    void DeliverPassenger()
    {
        playTimer = false;
        isPlaying = false;
        int i = 0;

        for (i = 0; i < passengers; i++)
        {
            CollectedPassengers.Add(Instantiate(PersonPrefab, myTaxi.transform.position - new Vector3(0.0f, 0f, 2.0f + i), Quaternion.identity));
            CollectedPassengers[i].gameObject.tag = "Passenger";
            CollectedPassengers[i].gameObject.name = myTaxi.name + " Passenger " + (i + 1);
            Debug.Log(CollectedPassengers[i].name + " has been delivered!");
            
            
        }

        Debug.Log(myTaxi.name + " has delivered " + passengers + "/5.");
        passengers -= passengers;
        currentSpeed = 0;
        Debug.Log(myTaxi.name + " has completed their trip, and in " + Time.time + " seconds.");
        t_Passengers.text = myTaxi.name + " Passengers: " + passengers.ToString();
        t_Speed.text = myTaxi.name + " Speed: " + currentSpeed.ToString();

    }

    void ReturnToStart()
    {
        Debug.Log(myTaxi.name + " is delivering.");
        returning = true;



        // Go through the waypoints and create connections.
        foreach (GameObject waypoint in GameObjectsWithWaypointTag)
        {
            WaypointCON tmpWaypointCon = waypoint.GetComponent<WaypointCON>();
            // Loop through a waypoints connections.
            foreach (GameObject WaypointConNode in tmpWaypointCon.Connections)
            {
                Connection aConnection = new Connection
                {
                    FromNode = waypoint,
                    ToNode = WaypointConNode
                };
                AStarManager.AddConnection(aConnection);
            }
        }
        // Run A Star...
        // ConnectionArray stores all the connections in the route to the goal / end node.
       // List_Of_Connections = AStarManager.PathfindAStar(end, start);

    }

    void SpawnPassengers()
    {
        int i = 0;
        foreach (GameObject goal in GoalsList)
        {
            
            if (goal == StartNode)
            {           
                continue;
            }
            else 
            {           
                myPassengers.Add(Instantiate(PersonPrefab, GoalsList[i+1].transform.position - new Vector3(0.0f, 0f, 0.0f), Quaternion.identity));
                myPassengers[i].gameObject.tag = "Passenger";
                myPassengers[i].gameObject.name = myTaxi.name + " Passenger " + (i + 1);             
                i++;
            }
                
        }       
    }



    void Start()
    {


        // Find all the waypoints in the level.

        InitialiseText();
        myTaxi = this.gameObject;
        Application.targetFrameRate = 120;
        old_position = transform.position;
        myTaxi.transform.position = StartNode.transform.position;

        GameObjectsWithWaypointTag = GameObject.FindGameObjectsWithTag("Waypoint").ToList();
        foreach (GameObject waypoint in GameObjectsWithWaypointTag)
        {
            WaypointCON tmpWaypointCon = waypoint.GetComponent<WaypointCON>();
            
            foreach (GameObject tmpWC in tmpWaypointCon.connections)
            {
                Connection tmp = new Connection();
                tmp.FromNode = waypoint;
                tmp.ToNode = tmpWC;
                AStarManager.AddConnection(tmp);
            }
            
        }


       // Debug.Log(myTaxi.name + " is collecting " + myPassengers.Count + " passenger(s) from " + end.name); // THIS WORKS

        //Creating connections between all goal nodes.

        List <ACOConnection> listOfGoalConnections = new List<ACOConnection>();
        foreach (GameObject goalNode in GoalsList) // Loop through one node.
        {
            foreach (GameObject goalNode_2 in GoalsList) // Looping through other nodes to connect them.
            {
                if (goalNode == goalNode_2)
                {
                    continue;
                }
                else 
                {
                    ACOConnection myACOCon = new ACOConnection();
                    myACOCon.SetConnection(goalNode, goalNode_2, 1.0f);
                    listOfGoalConnections.Add(myACOCon);
                }

            }
        }

        SpawnPassengers();

        MyRoute = MyACOCON.ACO(150, 50, GameObjectsWithWaypointTag.ToArray(), listOfGoalConnections, StartNode, MaxPathLength);

        foreach (ACOConnection route in MyRoute)
        {

            // Run A Star...
            // List_Of_Connections stores all the connections in the route to the goal / end node of each ACO route.
            List_Of_Connections.AddRange(AStarManager.PathfindAStar(route.FromNode, route.ToNode));
            

            

        }
    }

    // Draws debug objects in the editor and during editor play (if option set).
    void OnDrawGizmos()
    {
        // Draw path.
        if (MyRoute.Count > 0)
        {
            foreach (ACOConnection aConnection in MyRoute)
            {
                Gizmos.color = Color.white;
                Gizmos.DrawLine((aConnection.FromNode.transform.position + OffSet),
                (aConnection.ToNode.transform.position + OffSet));
            }
        }
    }
    // Update is called once per frame
    void Update()
    {
        if (isPlaying == true)
        {

            fps = 1 / Time.unscaledDeltaTime;
            t_fps.text = "Framerate: " + fps.ToString("00");

            t_Passengers.text = myTaxi.name + " Passengers: " + passengers.ToString();
            t_Speed.text = myTaxi.name + " Speed: " + currentSpeed.ToString();


            float distanceTravelled = Vector3.Distance(old_position, transform.position);
            totalDistanceTravelled += distanceTravelled;
            old_position = transform.position;
            //currentSpeed = MAX_SPEED;

            if (playTimer == true)
            {
                t_Runtime.text = ("Runtime: " + Time.time);
            }


            if (connectionsTravelled < List_Of_Connections.Count)
            {

                // Display the distance to waypoint
                Vector3 direction = List_Of_Connections[connectionsTravelled].ToNode.transform.position - transform.position;

                //closest.transform.position - transform.position;
                // Determine the distance of the vector
                float distance = direction.magnitude;

                // Calculate the normalised direction to the target from a game object.
                Vector3 normDirection = direction / distance;

                // Move the game object.
                transform.position = transform.position + normDirection * currentSpeed * Time.deltaTime;

                // Rotate the object.
                direction.y = 0;
                Quaternion rotation = Quaternion.LookRotation(direction, Vector3.up);
                transform.rotation = rotation;
                CollisionDetection();

                {
                    // Check if we have reached a node.
                    if (distance < CLOSE_DISTANCE && arrived == false)
                    {
                        connectionsTravelled++;

                        
                        // Check if our node contains our passenger.
                        if (myPassengers.Count != 0)
                        {

                            foreach (GameObject passenger in myPassengers)
                            {
                                if (Vector3.Distance(myTaxi.transform.position, passenger.transform.position) < 5)
                                {                             
                                    CollectPassenger(passenger);
                                    myPassengers.Remove(passenger);
                                    break;
                                }
                            }
                                                        
                        }

                    }

                    if (distance > CLOSE_DISTANCE)
                    {
                        arrived = false;
                    }

                }

            }
            else
            {
               DeliverPassenger();                      
            }
        }
        else
        {
            connectionsTravelled = 0;
        }
    }

    void CollisionDetection()
    {
        List<float> taxiDistancesToNextNode = new List<float>();
        GameObject[] otherTaxis = GameObject.FindGameObjectsWithTag("Taxi"); // working
        bool coming_at_me = false;
        bool crashing = false;
        GameObject currentNode = List_Of_Connections[connectionsTravelled].FromNode;
        GameObject nextNode = List_Of_Connections[connectionsTravelled].ToNode;



        int i = 0;
        foreach (var otherTaxi in otherTaxis)
        {
            if (otherTaxi.name == this.gameObject.name)
            {
                continue;
            }

            // Gain access to information regarding other taxis.
            Part3_Agent path = otherTaxi.GetComponent<Part3_Agent>();

            if (path == null)
            {
                Debug.Log("path == null");
                continue;

            }

            if (path.List_Of_Connections[path.connectionsTravelled].ToNode != (nextNode || currentNode))
            {
                continue;
            }

            if (path.List_Of_Connections[path.connectionsTravelled].ToNode == currentNode)
            {
                coming_at_me = true;
            }


            float distanceToMe = Vector3.Distance(myTaxi.transform.position, otherTaxi.transform.position);

            if (distanceToMe < 3) // the safety zone
            {
                taxiDistancesToNextNode.Add(Vector3.Distance(otherTaxi.transform.position, nextNode.transform.position));
                i++;
                crashing = true;
            }

        }

        bool closerThanOther = true;
        float myDistanceToNextNode = Vector3.Distance(nextNode.transform.position, transform.position);

        foreach (var otherDistance in taxiDistancesToNextNode)
        {

            if (myDistanceToNextNode > otherDistance)
            {
                closerThanOther = false;
            }
        }

        if (crashing == true)
        {
            if (closerThanOther == true)
            {
                Speedup();
            }

            else if (coming_at_me == true)
            {
                transform.localPosition = transform.localPosition + transform.right;
                transform.localPosition = transform.localPosition + transform.forward;
            }

            else
            {
                Slowdown();
            }

        }

        else
        {
            Speedup();
        }

    }


    void Speedup()
    {
        if (currentSpeed + 2 < MAX_SPEED)
        {
            currentSpeed += 2;
        }
        else
        {
            currentSpeed = MAX_SPEED;
        }

        if (currentSpeed > MAX_SPEED)
        {
            currentSpeed = MAX_SPEED;
        }
    }

    void Slowdown()
    {
        if (currentSpeed - 2 >= 0)
        {
            currentSpeed -= 2;
        }
        else
        {
            currentSpeed = 0;
        }
    }

}
